//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConUniServiceReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RespuestaAutenticacion", Namespace="http://schemas.datacontract.org/2004/07/ConUni_Soap_Dotnet_GR06.Modelos")]
    public partial class RespuestaAutenticacion : object
    {
        
        private bool ExitosoField;
        
        private string MensajeField;
        
        private string UsernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Exitoso
        {
            get
            {
                return this.ExitosoField;
            }
            set
            {
                this.ExitosoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mensaje
        {
            get
            {
                return this.MensajeField;
            }
            set
            {
                this.MensajeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username
        {
            get
            {
                return this.UsernameField;
            }
            set
            {
                this.UsernameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConUniServiceReference.IConversorUnidadesWS")]
    public interface IConversorUnidadesWS
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversorUnidadesWS/Login", ReplyAction="http://tempuri.org/IConversorUnidadesWS/LoginResponse")]
        System.Threading.Tasks.Task<ConUniServiceReference.RespuestaAutenticacion> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversorUnidadesWS/CelsiusAFahrenheit", ReplyAction="http://tempuri.org/IConversorUnidadesWS/CelsiusAFahrenheitResponse")]
        System.Threading.Tasks.Task<double> CelsiusAFahrenheitAsync(double celsius);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversorUnidadesWS/FahrenheitACelsius", ReplyAction="http://tempuri.org/IConversorUnidadesWS/FahrenheitACelsiusResponse")]
        System.Threading.Tasks.Task<double> FahrenheitACelsiusAsync(double fahrenheit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversorUnidadesWS/CelsiusAKelvin", ReplyAction="http://tempuri.org/IConversorUnidadesWS/CelsiusAKelvinResponse")]
        System.Threading.Tasks.Task<double> CelsiusAKelvinAsync(double celsius);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversorUnidadesWS/KelvinACelsius", ReplyAction="http://tempuri.org/IConversorUnidadesWS/KelvinACelsiusResponse")]
        System.Threading.Tasks.Task<double> KelvinACelsiusAsync(double kelvin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversorUnidadesWS/FahrenheitAKelvin", ReplyAction="http://tempuri.org/IConversorUnidadesWS/FahrenheitAKelvinResponse")]
        System.Threading.Tasks.Task<double> FahrenheitAKelvinAsync(double fahrenheit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversorUnidadesWS/KelvinAFahrenheit", ReplyAction="http://tempuri.org/IConversorUnidadesWS/KelvinAFahrenheitResponse")]
        System.Threading.Tasks.Task<double> KelvinAFahrenheitAsync(double kelvin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversorUnidadesWS/MetroAKilometro", ReplyAction="http://tempuri.org/IConversorUnidadesWS/MetroAKilometroResponse")]
        System.Threading.Tasks.Task<double> MetroAKilometroAsync(double metros);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversorUnidadesWS/KilometroAMetro", ReplyAction="http://tempuri.org/IConversorUnidadesWS/KilometroAMetroResponse")]
        System.Threading.Tasks.Task<double> KilometroAMetroAsync(double kilometros);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversorUnidadesWS/MetroAMilla", ReplyAction="http://tempuri.org/IConversorUnidadesWS/MetroAMillaResponse")]
        System.Threading.Tasks.Task<double> MetroAMillaAsync(double metros);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversorUnidadesWS/MillaAMetro", ReplyAction="http://tempuri.org/IConversorUnidadesWS/MillaAMetroResponse")]
        System.Threading.Tasks.Task<double> MillaAMetroAsync(double millas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversorUnidadesWS/KilometroAMilla", ReplyAction="http://tempuri.org/IConversorUnidadesWS/KilometroAMillaResponse")]
        System.Threading.Tasks.Task<double> KilometroAMillaAsync(double kilometros);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversorUnidadesWS/MillaAKilometro", ReplyAction="http://tempuri.org/IConversorUnidadesWS/MillaAKilometroResponse")]
        System.Threading.Tasks.Task<double> MillaAKilometroAsync(double millas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversorUnidadesWS/KilogramoAGramo", ReplyAction="http://tempuri.org/IConversorUnidadesWS/KilogramoAGramoResponse")]
        System.Threading.Tasks.Task<double> KilogramoAGramoAsync(double kilogramos);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversorUnidadesWS/GramoAKilogramo", ReplyAction="http://tempuri.org/IConversorUnidadesWS/GramoAKilogramoResponse")]
        System.Threading.Tasks.Task<double> GramoAKilogramoAsync(double gramos);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversorUnidadesWS/KilogramoALibra", ReplyAction="http://tempuri.org/IConversorUnidadesWS/KilogramoALibraResponse")]
        System.Threading.Tasks.Task<double> KilogramoALibraAsync(double kilogramos);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversorUnidadesWS/LibraAKilogramo", ReplyAction="http://tempuri.org/IConversorUnidadesWS/LibraAKilogramoResponse")]
        System.Threading.Tasks.Task<double> LibraAKilogramoAsync(double libras);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversorUnidadesWS/GramoALibra", ReplyAction="http://tempuri.org/IConversorUnidadesWS/GramoALibraResponse")]
        System.Threading.Tasks.Task<double> GramoALibraAsync(double gramos);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversorUnidadesWS/LibraAGramo", ReplyAction="http://tempuri.org/IConversorUnidadesWS/LibraAGramoResponse")]
        System.Threading.Tasks.Task<double> LibraAGramoAsync(double libras);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public interface IConversorUnidadesWSChannel : ConUniServiceReference.IConversorUnidadesWS, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public partial class ConversorUnidadesWSClient : System.ServiceModel.ClientBase<ConUniServiceReference.IConversorUnidadesWS>, ConUniServiceReference.IConversorUnidadesWS
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ConversorUnidadesWSClient() : 
                base(ConversorUnidadesWSClient.GetDefaultBinding(), ConversorUnidadesWSClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IConversorUnidadesWS.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ConversorUnidadesWSClient(EndpointConfiguration endpointConfiguration) : 
                base(ConversorUnidadesWSClient.GetBindingForEndpoint(endpointConfiguration), ConversorUnidadesWSClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ConversorUnidadesWSClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ConversorUnidadesWSClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ConversorUnidadesWSClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ConversorUnidadesWSClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ConversorUnidadesWSClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ConUniServiceReference.RespuestaAutenticacion> LoginAsync(string username, string password)
        {
            return base.Channel.LoginAsync(username, password);
        }
        
        public System.Threading.Tasks.Task<double> CelsiusAFahrenheitAsync(double celsius)
        {
            return base.Channel.CelsiusAFahrenheitAsync(celsius);
        }
        
        public System.Threading.Tasks.Task<double> FahrenheitACelsiusAsync(double fahrenheit)
        {
            return base.Channel.FahrenheitACelsiusAsync(fahrenheit);
        }
        
        public System.Threading.Tasks.Task<double> CelsiusAKelvinAsync(double celsius)
        {
            return base.Channel.CelsiusAKelvinAsync(celsius);
        }
        
        public System.Threading.Tasks.Task<double> KelvinACelsiusAsync(double kelvin)
        {
            return base.Channel.KelvinACelsiusAsync(kelvin);
        }
        
        public System.Threading.Tasks.Task<double> FahrenheitAKelvinAsync(double fahrenheit)
        {
            return base.Channel.FahrenheitAKelvinAsync(fahrenheit);
        }
        
        public System.Threading.Tasks.Task<double> KelvinAFahrenheitAsync(double kelvin)
        {
            return base.Channel.KelvinAFahrenheitAsync(kelvin);
        }
        
        public System.Threading.Tasks.Task<double> MetroAKilometroAsync(double metros)
        {
            return base.Channel.MetroAKilometroAsync(metros);
        }
        
        public System.Threading.Tasks.Task<double> KilometroAMetroAsync(double kilometros)
        {
            return base.Channel.KilometroAMetroAsync(kilometros);
        }
        
        public System.Threading.Tasks.Task<double> MetroAMillaAsync(double metros)
        {
            return base.Channel.MetroAMillaAsync(metros);
        }
        
        public System.Threading.Tasks.Task<double> MillaAMetroAsync(double millas)
        {
            return base.Channel.MillaAMetroAsync(millas);
        }
        
        public System.Threading.Tasks.Task<double> KilometroAMillaAsync(double kilometros)
        {
            return base.Channel.KilometroAMillaAsync(kilometros);
        }
        
        public System.Threading.Tasks.Task<double> MillaAKilometroAsync(double millas)
        {
            return base.Channel.MillaAKilometroAsync(millas);
        }
        
        public System.Threading.Tasks.Task<double> KilogramoAGramoAsync(double kilogramos)
        {
            return base.Channel.KilogramoAGramoAsync(kilogramos);
        }
        
        public System.Threading.Tasks.Task<double> GramoAKilogramoAsync(double gramos)
        {
            return base.Channel.GramoAKilogramoAsync(gramos);
        }
        
        public System.Threading.Tasks.Task<double> KilogramoALibraAsync(double kilogramos)
        {
            return base.Channel.KilogramoALibraAsync(kilogramos);
        }
        
        public System.Threading.Tasks.Task<double> LibraAKilogramoAsync(double libras)
        {
            return base.Channel.LibraAKilogramoAsync(libras);
        }
        
        public System.Threading.Tasks.Task<double> GramoALibraAsync(double gramos)
        {
            return base.Channel.GramoALibraAsync(gramos);
        }
        
        public System.Threading.Tasks.Task<double> LibraAGramoAsync(double libras)
        {
            return base.Channel.LibraAGramoAsync(libras);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        #if !NET6_0_OR_GREATER
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        #endif
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IConversorUnidadesWS))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IConversorUnidadesWS))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:61088/WebServices/ConversorUnidadesWS.svc");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ConversorUnidadesWSClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IConversorUnidadesWS);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ConversorUnidadesWSClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IConversorUnidadesWS);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IConversorUnidadesWS,
        }
    }
}
